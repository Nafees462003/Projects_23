#include <AnimatedGIF.h>
#include <TFT_eSPI.h> // Include the TFT_eSPI library
#include <SPI.h>
#include <SD.h>

#define TFT_CS         15
#define TFT_RST        4
#define TFT_DC         2

#define DISPLAY_WIDTH  128
#define DISPLAY_HEIGHT 160

TFT_eSPI tft = TFT_eSPI(); // Create TFT object
AnimatedGIF gif;
File f;
String gifFilename = "/kiss2.GIF"; // Default filename

void * GIFOpenFile(const char *fname, int32_t *pSize) {
  f = SD.open(fname);
  if (f) {
    *pSize = f.size();
    return (void *)&f;
  }
  return NULL;
}

void GIFCloseFile(void *pHandle) {
  File *f = static_cast<File *>(pHandle);
  if (f != NULL)
    f->close();
}

int32_t GIFReadFile(GIFFILE *pFile, uint8_t *pBuf, int32_t iLen) {
    int32_t iBytesRead;
    iBytesRead = iLen;
    File *f = static_cast<File *>(pFile->fHandle);
    if ((pFile->iSize - pFile->iPos) < iLen)
       iBytesRead = pFile->iSize - pFile->iPos - 1;
    if (iBytesRead <= 0)
       return 0;
    iBytesRead = (int32_t)f->read(pBuf, iBytesRead);
    pFile->iPos = f->position();
    return iBytesRead;
}

int32_t GIFSeekFile(GIFFILE *pFile, int32_t iPosition) {
  File *f = static_cast<File *>(pFile->fHandle);
  f->seek(iPosition);
  pFile->iPos = (int32_t)f->position();
  return pFile->iPos;
}

void GIFDraw(GIFDRAW *pDraw) {
    uint8_t *s;
    uint16_t *d, *usPalette, usTemp[320];
    int x, y, iWidth;

    iWidth = pDraw->iWidth;
    if (iWidth + pDraw->iX > DISPLAY_WIDTH)
       iWidth = DISPLAY_WIDTH - pDraw->iX;
    usPalette = pDraw->pPalette;
    y = pDraw->iY + pDraw->y;
    if (y >= DISPLAY_HEIGHT || pDraw->iX >= DISPLAY_WIDTH || iWidth < 1)
       return;
    s = pDraw->pPixels;

    if (pDraw->ucDisposalMethod == 2) {
      for (x=0; x<iWidth; x++) {
        if (s[x] == pDraw->ucTransparent)
           s[x] = pDraw->ucBackground;
      }
      pDraw->ucHasTransparency = 0;
    }

    if (pDraw->ucHasTransparency) {
      uint8_t *pEnd, c, ucTransparent = pDraw->ucTransparent;
      int x, iCount;
      pEnd = s + iWidth;
      x = 0;
      iCount = 0;
      while(x < iWidth) {
        c = ucTransparent-1;
        d = usTemp;
        while (c != ucTransparent && s < pEnd) {
          c = *s++;
          if (c == ucTransparent) {
            s--;
          } else {
            *d++ = usPalette[c];
            iCount++;
          }
        }
        if (iCount) {
          tft.startWrite();
          tft.setAddrWindow(pDraw->iX+x, y, iCount, 1);
          tft.pushColors(usTemp, iCount, false);
          tft.endWrite();
          x += iCount;
          iCount = 0;
        }
        c = ucTransparent;
        while (c == ucTransparent && s < pEnd) {
          c = *s++;
          if (c == ucTransparent)
             iCount++;
          else
             s--;
        }
        if (iCount) {
          x += iCount;
          iCount = 0;
        }
      }
    } else {
      s = pDraw->pPixels;
      for (x=0; x<iWidth; x++)
        usTemp[x] = usPalette[*s++];
      tft.startWrite();
      tft.setAddrWindow(pDraw->iX, y, iWidth, 1);
      tft.pushColors(usTemp, iWidth, false);
      tft.endWrite();
    }
}

void setup() {
  Serial.begin(115200);
  while (!Serial);

  SPI.begin();

  if(!SD.begin(12)) {
    Serial.println("SD Card mount failed!");
    return;
  } else {
    Serial.println("SD Card mount succeeded!");
  }

  tft.init();
  tft.setRotation(0); // Adjust rotation if necessary
  tft.fillScreen(TFT_BLACK);
  gif.begin(LITTLE_ENDIAN_PIXELS);
}

void loop() {
  // Check for available serial input
  if (Serial.available()) {
    String inputFilename = Serial.readStringUntil('\n'); // Read until newline
    if (inputFilename.length() > 0) {
      gifFilename = inputFilename; // Update the filename
      Serial.printf("GIF filename updated to: %s\n", gifFilename.c_str());
    }
  }

  if (gif.open(gifFilename.c_str(), GIFOpenFile, GIFCloseFile, GIFReadFile, GIFSeekFile, GIFDraw)) {
    GIFINFO gi;
    Serial.printf("Successfully opened GIF; Canvas size = %d x %d\n", gif.getCanvasWidth(), gif.getCanvasHeight());
    if (gif.getInfo(&gi)) {
      Serial.printf("frame count: %d\n", gi.iFrameCount);
      Serial.printf("duration: %d ms\n", gi.iDuration);
      Serial.printf("max delay: %d ms\n", gi.iMaxDelay);
      Serial.printf("min delay: %d ms\n", gi.iMinDelay);
    }
    while (gif.playFrame(true, NULL)) {
    }
    gif.close();
  } else {
    Serial.printf("Error opening file = %d\n", gif.getLastError());
    while (1) {}
  }
}
