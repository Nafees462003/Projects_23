#include <Wire.h>
const int slaveAddress = 8;

// Pin definitions (compressed into uint8_t)
uint8_t keyPins[19] = {3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, A7, A6, A0, A1, A2, A3};

// Keycodes (still uint8_t as before)
uint8_t keyCodes[19] = {'1', '2', '3', '4', 'q', 'e','r', 't', 'y', '6', '7', 'f','g', '5', 'z', 'x', 'c', 'v','b'};

// Debounce and timing (compressed into uint16_t)
uint16_t lastDebounceTime[19] = {0};  // Using 2 bytes per element instead of 4 bytes
uint16_t lastSendTime[19] = {0};      // Same here

// Store keyStates and isAutoRepeating as bits in two uint32_t variables (compressed from bool arrays)
uint32_t keyStates = 0;          // 32 bits to store 19 key states
uint32_t isAutoRepeating = 0;    // 32 bits to store 19 auto-repeat states

unsigned long debounceDelay = 50;  // 50 milliseconds debounce time
unsigned long repeatDelay = 500;   // Delay before starting auto-repeat (500ms)
unsigned long repeatRate = 80;    // Time between auto-repeated key presses (80ms)

void setup() {
  Wire.begin(); // Join I2C bus as master
  setInputs();
}

void loop() {
  for (int i = 0; i < 19; i++) {
    handleButton(i);
  }
}

void setInputs() {
  for (int i = 0; i < 19; i++) {
    pinMode(keyPins[i], INPUT_PULLUP);
  }
}

void handleButton(int keyIndex) {
  int reading = digitalRead(keyPins[keyIndex]);

  // If the button state has changed
  if (reading != bitRead(keyStates, keyIndex)) {
    lastDebounceTime[keyIndex] = millis();  // Reset debounce timer
  }

  // Debounce logic: Only act if the button state is stable for debounceDelay
  if ((millis() - lastDebounceTime[keyIndex]) > debounceDelay) {
    if (reading == LOW) {  // Button pressed
      if (!bitRead(keyStates, keyIndex)) {
        // Button was just pressed
        bitWrite(keyStates, keyIndex, 1);
        lastSendTime[keyIndex] = millis();  // Mark the time of the first press
        sendKeyPress(keyIndex);  // Send the key press immediately
        bitWrite(isAutoRepeating, keyIndex, 1);  // Enable auto-repeat
      }

      // Handle auto-repeat
      if (bitRead(isAutoRepeating, keyIndex)) {
        if (millis() - lastSendTime[keyIndex] > repeatRate) {
          sendKeyPress(keyIndex);
          lastSendTime[keyIndex] = millis();  // Update the last send time
        }
      }
    } else {  // Button released
      if (bitRead(keyStates, keyIndex)) {
        bitWrite(keyStates, keyIndex, 0);  // Reset the state
        bitWrite(isAutoRepeating, keyIndex, 0);  // Stop auto-repeat
      }
    }
  }
}

void sendKeyPress(int keyIndex) {
  Wire.beginTransmission(slaveAddress);
  Wire.write(keyCodes[keyIndex]);        // Send the key code
  Wire.endTransmission(); 
}
